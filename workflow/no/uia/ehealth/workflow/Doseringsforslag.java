//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.05.19 at 09:29:28 PM CEST 
//


package no.uia.ehealth.workflow;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.Duration;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="Behandlingsfase" type="{http://www.kith.no/xmlstds}CS" minOccurs="0"/&gt;
 *         &lt;element name="MinTidForrigeDosering" type="{http://www.w3.org/2001/XMLSchema}duration" minOccurs="0"/&gt;
 *         &lt;element name="Varighet" type="{http://www.w3.org/2001/XMLSchema}duration" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.kith.no/xmlstds/eresept/m30/2014-12-01}Doseringsregel" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.kith.no/xmlstds/eresept/m30/2014-12-01}GodkjentNormaldose" maxOccurs="unbounded"/&gt;
 *         &lt;element ref="{http://www.kith.no/xmlstds/eresept/m30/2014-12-01}GodkjentMaksimaldose" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "behandlingsfase",
    "minTidForrigeDosering",
    "varighet",
    "doseringsregel",
    "godkjentNormaldose",
    "godkjentMaksimaldose"
})
@XmlRootElement(name = "Doseringsforslag", namespace = "http://www.kith.no/xmlstds/eresept/m30/2014-12-01")
public class Doseringsforslag
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "Behandlingsfase", namespace = "http://www.kith.no/xmlstds/eresept/m30/2014-12-01")
    protected CS behandlingsfase;
    @XmlElement(name = "MinTidForrigeDosering", namespace = "http://www.kith.no/xmlstds/eresept/m30/2014-12-01")
    protected Duration minTidForrigeDosering;
    @XmlElement(name = "Varighet", namespace = "http://www.kith.no/xmlstds/eresept/m30/2014-12-01")
    protected Duration varighet;
    @XmlElement(name = "Doseringsregel", namespace = "http://www.kith.no/xmlstds/eresept/m30/2014-12-01")
    protected List<Doseringsregel> doseringsregel;
    @XmlElement(name = "GodkjentNormaldose", namespace = "http://www.kith.no/xmlstds/eresept/m30/2014-12-01", required = true)
    protected List<GodkjentNormaldose> godkjentNormaldose;
    @XmlElement(name = "GodkjentMaksimaldose", namespace = "http://www.kith.no/xmlstds/eresept/m30/2014-12-01")
    protected List<GodkjentMaksimaldose> godkjentMaksimaldose;

    /**
     * Gets the value of the behandlingsfase property.
     * 
     * @return
     *     possible object is
     *     {@link CS }
     *     
     */
    public CS getBehandlingsfase() {
        return behandlingsfase;
    }

    /**
     * Sets the value of the behandlingsfase property.
     * 
     * @param value
     *     allowed object is
     *     {@link CS }
     *     
     */
    public void setBehandlingsfase(CS value) {
        this.behandlingsfase = value;
    }

    /**
     * Gets the value of the minTidForrigeDosering property.
     * 
     * @return
     *     possible object is
     *     {@link Duration }
     *     
     */
    public Duration getMinTidForrigeDosering() {
        return minTidForrigeDosering;
    }

    /**
     * Sets the value of the minTidForrigeDosering property.
     * 
     * @param value
     *     allowed object is
     *     {@link Duration }
     *     
     */
    public void setMinTidForrigeDosering(Duration value) {
        this.minTidForrigeDosering = value;
    }

    /**
     * Gets the value of the varighet property.
     * 
     * @return
     *     possible object is
     *     {@link Duration }
     *     
     */
    public Duration getVarighet() {
        return varighet;
    }

    /**
     * Sets the value of the varighet property.
     * 
     * @param value
     *     allowed object is
     *     {@link Duration }
     *     
     */
    public void setVarighet(Duration value) {
        this.varighet = value;
    }

    /**
     * Gets the value of the doseringsregel property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the doseringsregel property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDoseringsregel().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Doseringsregel }
     * 
     * 
     */
    public List<Doseringsregel> getDoseringsregel() {
        if (doseringsregel == null) {
            doseringsregel = new ArrayList<Doseringsregel>();
        }
        return this.doseringsregel;
    }

    /**
     * Gets the value of the godkjentNormaldose property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the godkjentNormaldose property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGodkjentNormaldose().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link GodkjentNormaldose }
     * 
     * 
     */
    public List<GodkjentNormaldose> getGodkjentNormaldose() {
        if (godkjentNormaldose == null) {
            godkjentNormaldose = new ArrayList<GodkjentNormaldose>();
        }
        return this.godkjentNormaldose;
    }

    /**
     * Gets the value of the godkjentMaksimaldose property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the godkjentMaksimaldose property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGodkjentMaksimaldose().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link GodkjentMaksimaldose }
     * 
     * 
     */
    public List<GodkjentMaksimaldose> getGodkjentMaksimaldose() {
        if (godkjentMaksimaldose == null) {
            godkjentMaksimaldose = new ArrayList<GodkjentMaksimaldose>();
        }
        return this.godkjentMaksimaldose;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            CS theBehandlingsfase;
            theBehandlingsfase = this.getBehandlingsfase();
            strategy.appendField(locator, this, "behandlingsfase", buffer, theBehandlingsfase);
        }
        {
            Duration theMinTidForrigeDosering;
            theMinTidForrigeDosering = this.getMinTidForrigeDosering();
            strategy.appendField(locator, this, "minTidForrigeDosering", buffer, theMinTidForrigeDosering);
        }
        {
            Duration theVarighet;
            theVarighet = this.getVarighet();
            strategy.appendField(locator, this, "varighet", buffer, theVarighet);
        }
        {
            List<Doseringsregel> theDoseringsregel;
            theDoseringsregel = (((this.doseringsregel!= null)&&(!this.doseringsregel.isEmpty()))?this.getDoseringsregel():null);
            strategy.appendField(locator, this, "doseringsregel", buffer, theDoseringsregel);
        }
        {
            List<GodkjentNormaldose> theGodkjentNormaldose;
            theGodkjentNormaldose = (((this.godkjentNormaldose!= null)&&(!this.godkjentNormaldose.isEmpty()))?this.getGodkjentNormaldose():null);
            strategy.appendField(locator, this, "godkjentNormaldose", buffer, theGodkjentNormaldose);
        }
        {
            List<GodkjentMaksimaldose> theGodkjentMaksimaldose;
            theGodkjentMaksimaldose = (((this.godkjentMaksimaldose!= null)&&(!this.godkjentMaksimaldose.isEmpty()))?this.getGodkjentMaksimaldose():null);
            strategy.appendField(locator, this, "godkjentMaksimaldose", buffer, theGodkjentMaksimaldose);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Doseringsforslag)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Doseringsforslag that = ((Doseringsforslag) object);
        {
            CS lhsBehandlingsfase;
            lhsBehandlingsfase = this.getBehandlingsfase();
            CS rhsBehandlingsfase;
            rhsBehandlingsfase = that.getBehandlingsfase();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "behandlingsfase", lhsBehandlingsfase), LocatorUtils.property(thatLocator, "behandlingsfase", rhsBehandlingsfase), lhsBehandlingsfase, rhsBehandlingsfase)) {
                return false;
            }
        }
        {
            Duration lhsMinTidForrigeDosering;
            lhsMinTidForrigeDosering = this.getMinTidForrigeDosering();
            Duration rhsMinTidForrigeDosering;
            rhsMinTidForrigeDosering = that.getMinTidForrigeDosering();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "minTidForrigeDosering", lhsMinTidForrigeDosering), LocatorUtils.property(thatLocator, "minTidForrigeDosering", rhsMinTidForrigeDosering), lhsMinTidForrigeDosering, rhsMinTidForrigeDosering)) {
                return false;
            }
        }
        {
            Duration lhsVarighet;
            lhsVarighet = this.getVarighet();
            Duration rhsVarighet;
            rhsVarighet = that.getVarighet();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "varighet", lhsVarighet), LocatorUtils.property(thatLocator, "varighet", rhsVarighet), lhsVarighet, rhsVarighet)) {
                return false;
            }
        }
        {
            List<Doseringsregel> lhsDoseringsregel;
            lhsDoseringsregel = (((this.doseringsregel!= null)&&(!this.doseringsregel.isEmpty()))?this.getDoseringsregel():null);
            List<Doseringsregel> rhsDoseringsregel;
            rhsDoseringsregel = (((that.doseringsregel!= null)&&(!that.doseringsregel.isEmpty()))?that.getDoseringsregel():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "doseringsregel", lhsDoseringsregel), LocatorUtils.property(thatLocator, "doseringsregel", rhsDoseringsregel), lhsDoseringsregel, rhsDoseringsregel)) {
                return false;
            }
        }
        {
            List<GodkjentNormaldose> lhsGodkjentNormaldose;
            lhsGodkjentNormaldose = (((this.godkjentNormaldose!= null)&&(!this.godkjentNormaldose.isEmpty()))?this.getGodkjentNormaldose():null);
            List<GodkjentNormaldose> rhsGodkjentNormaldose;
            rhsGodkjentNormaldose = (((that.godkjentNormaldose!= null)&&(!that.godkjentNormaldose.isEmpty()))?that.getGodkjentNormaldose():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "godkjentNormaldose", lhsGodkjentNormaldose), LocatorUtils.property(thatLocator, "godkjentNormaldose", rhsGodkjentNormaldose), lhsGodkjentNormaldose, rhsGodkjentNormaldose)) {
                return false;
            }
        }
        {
            List<GodkjentMaksimaldose> lhsGodkjentMaksimaldose;
            lhsGodkjentMaksimaldose = (((this.godkjentMaksimaldose!= null)&&(!this.godkjentMaksimaldose.isEmpty()))?this.getGodkjentMaksimaldose():null);
            List<GodkjentMaksimaldose> rhsGodkjentMaksimaldose;
            rhsGodkjentMaksimaldose = (((that.godkjentMaksimaldose!= null)&&(!that.godkjentMaksimaldose.isEmpty()))?that.getGodkjentMaksimaldose():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "godkjentMaksimaldose", lhsGodkjentMaksimaldose), LocatorUtils.property(thatLocator, "godkjentMaksimaldose", rhsGodkjentMaksimaldose), lhsGodkjentMaksimaldose, rhsGodkjentMaksimaldose)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            CS theBehandlingsfase;
            theBehandlingsfase = this.getBehandlingsfase();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "behandlingsfase", theBehandlingsfase), currentHashCode, theBehandlingsfase);
        }
        {
            Duration theMinTidForrigeDosering;
            theMinTidForrigeDosering = this.getMinTidForrigeDosering();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "minTidForrigeDosering", theMinTidForrigeDosering), currentHashCode, theMinTidForrigeDosering);
        }
        {
            Duration theVarighet;
            theVarighet = this.getVarighet();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "varighet", theVarighet), currentHashCode, theVarighet);
        }
        {
            List<Doseringsregel> theDoseringsregel;
            theDoseringsregel = (((this.doseringsregel!= null)&&(!this.doseringsregel.isEmpty()))?this.getDoseringsregel():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "doseringsregel", theDoseringsregel), currentHashCode, theDoseringsregel);
        }
        {
            List<GodkjentNormaldose> theGodkjentNormaldose;
            theGodkjentNormaldose = (((this.godkjentNormaldose!= null)&&(!this.godkjentNormaldose.isEmpty()))?this.getGodkjentNormaldose():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "godkjentNormaldose", theGodkjentNormaldose), currentHashCode, theGodkjentNormaldose);
        }
        {
            List<GodkjentMaksimaldose> theGodkjentMaksimaldose;
            theGodkjentMaksimaldose = (((this.godkjentMaksimaldose!= null)&&(!this.godkjentMaksimaldose.isEmpty()))?this.getGodkjentMaksimaldose():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "godkjentMaksimaldose", theGodkjentMaksimaldose), currentHashCode, theGodkjentMaksimaldose);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
