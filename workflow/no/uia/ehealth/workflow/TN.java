//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.05.19 at 09:29:28 PM CEST 
//


package no.uia.ehealth.workflow;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for TN complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="TN"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.kith.no/xmlstds}ED"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{http://www.kith.no/xmlstds}REF" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute ref="{http://www.kith.no/xmlstds}COMPN"/&gt;
 *       &lt;attribute ref="{http://www.kith.no/xmlstds}IC"/&gt;
 *       &lt;attribute ref="{http://www.kith.no/xmlstds}ICA"/&gt;
 *       &lt;attribute ref="{http://www.kith.no/xmlstds}NULL"/&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TN", namespace = "http://www.kith.no/xmlstds", propOrder = {
    "ref"
})
public class TN
    extends ED
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "REF")
    protected URL ref;
    @XmlAttribute(name = "COMPN", namespace = "http://www.kith.no/xmlstds")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String compn;
    @XmlAttribute(name = "IC", namespace = "http://www.kith.no/xmlstds")
    protected byte[] ic;
    @XmlAttribute(name = "ICA", namespace = "http://www.kith.no/xmlstds")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String ica;
    @XmlAttribute(name = "NULL", namespace = "http://www.kith.no/xmlstds")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String _null;

    /**
     * Gets the value of the ref property.
     * 
     * @return
     *     possible object is
     *     {@link URL }
     *     
     */
    public URL getREF() {
        return ref;
    }

    /**
     * Sets the value of the ref property.
     * 
     * @param value
     *     allowed object is
     *     {@link URL }
     *     
     */
    public void setREF(URL value) {
        this.ref = value;
    }

    /**
     * Gets the value of the compn property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCOMPN() {
        return compn;
    }

    /**
     * Sets the value of the compn property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCOMPN(String value) {
        this.compn = value;
    }

    /**
     * Gets the value of the ic property.
     * 
     * @return
     *     possible object is
     *     byte[]
     */
    public byte[] getIC() {
        return ic;
    }

    /**
     * Sets the value of the ic property.
     * 
     * @param value
     *     allowed object is
     *     byte[]
     */
    public void setIC(byte[] value) {
        this.ic = value;
    }

    /**
     * Gets the value of the ica property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getICA() {
        if (ica == null) {
            return "SHA-1";
        } else {
            return ica;
        }
    }

    /**
     * Sets the value of the ica property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setICA(String value) {
        this.ica = value;
    }

    /**
     * Gets the value of the null property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNULL() {
        return _null;
    }

    /**
     * Sets the value of the null property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNULL(String value) {
        this._null = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            URL theREF;
            theREF = this.getREF();
            strategy.appendField(locator, this, "ref", buffer, theREF);
        }
        {
            String theCOMPN;
            theCOMPN = this.getCOMPN();
            strategy.appendField(locator, this, "compn", buffer, theCOMPN);
        }
        {
            byte[] theIC;
            theIC = this.getIC();
            strategy.appendField(locator, this, "ic", buffer, theIC);
        }
        {
            String theICA;
            theICA = this.getICA();
            strategy.appendField(locator, this, "ica", buffer, theICA);
        }
        {
            String theNULL;
            theNULL = this.getNULL();
            strategy.appendField(locator, this, "_null", buffer, theNULL);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TN)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final TN that = ((TN) object);
        {
            URL lhsREF;
            lhsREF = this.getREF();
            URL rhsREF;
            rhsREF = that.getREF();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ref", lhsREF), LocatorUtils.property(thatLocator, "ref", rhsREF), lhsREF, rhsREF)) {
                return false;
            }
        }
        {
            String lhsCOMPN;
            lhsCOMPN = this.getCOMPN();
            String rhsCOMPN;
            rhsCOMPN = that.getCOMPN();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "compn", lhsCOMPN), LocatorUtils.property(thatLocator, "compn", rhsCOMPN), lhsCOMPN, rhsCOMPN)) {
                return false;
            }
        }
        {
            byte[] lhsIC;
            lhsIC = this.getIC();
            byte[] rhsIC;
            rhsIC = that.getIC();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ic", lhsIC), LocatorUtils.property(thatLocator, "ic", rhsIC), lhsIC, rhsIC)) {
                return false;
            }
        }
        {
            String lhsICA;
            lhsICA = this.getICA();
            String rhsICA;
            rhsICA = that.getICA();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ica", lhsICA), LocatorUtils.property(thatLocator, "ica", rhsICA), lhsICA, rhsICA)) {
                return false;
            }
        }
        {
            String lhsNULL;
            lhsNULL = this.getNULL();
            String rhsNULL;
            rhsNULL = that.getNULL();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "_null", lhsNULL), LocatorUtils.property(thatLocator, "_null", rhsNULL), lhsNULL, rhsNULL)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            URL theREF;
            theREF = this.getREF();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ref", theREF), currentHashCode, theREF);
        }
        {
            String theCOMPN;
            theCOMPN = this.getCOMPN();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "compn", theCOMPN), currentHashCode, theCOMPN);
        }
        {
            byte[] theIC;
            theIC = this.getIC();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ic", theIC), currentHashCode, theIC);
        }
        {
            String theICA;
            theICA = this.getICA();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ica", theICA), currentHashCode, theICA);
        }
        {
            String theNULL;
            theNULL = this.getNULL();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "_null", theNULL), currentHashCode, theNULL);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
