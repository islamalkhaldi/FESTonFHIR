//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.05.19 at 09:29:28 PM CEST 
//


package no.uia.ehealth.workflow;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="Beskrivelse" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.kith.no/xmlstds/eresept/m30/2014-12-01}Legemiddelforslag" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "beskrivelse",
    "legemiddelforslag"
})
@XmlRootElement(name = "Behandling", namespace = "http://www.kith.no/xmlstds/eresept/m30/2014-12-01")
public class Behandling
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "Beskrivelse", namespace = "http://www.kith.no/xmlstds/eresept/m30/2014-12-01")
    protected String beskrivelse;
    @XmlElement(name = "Legemiddelforslag", namespace = "http://www.kith.no/xmlstds/eresept/m30/2014-12-01")
    protected List<Legemiddelforslag> legemiddelforslag;

    /**
     * Gets the value of the beskrivelse property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBeskrivelse() {
        return beskrivelse;
    }

    /**
     * Sets the value of the beskrivelse property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setBeskrivelse(String value) {
        this.beskrivelse = value;
    }

    /**
     * Gets the value of the legemiddelforslag property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the legemiddelforslag property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLegemiddelforslag().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Legemiddelforslag }
     * 
     * 
     */
    public List<Legemiddelforslag> getLegemiddelforslag() {
        if (legemiddelforslag == null) {
            legemiddelforslag = new ArrayList<Legemiddelforslag>();
        }
        return this.legemiddelforslag;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            String theBeskrivelse;
            theBeskrivelse = this.getBeskrivelse();
            strategy.appendField(locator, this, "beskrivelse", buffer, theBeskrivelse);
        }
        {
            List<Legemiddelforslag> theLegemiddelforslag;
            theLegemiddelforslag = (((this.legemiddelforslag!= null)&&(!this.legemiddelforslag.isEmpty()))?this.getLegemiddelforslag():null);
            strategy.appendField(locator, this, "legemiddelforslag", buffer, theLegemiddelforslag);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Behandling)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Behandling that = ((Behandling) object);
        {
            String lhsBeskrivelse;
            lhsBeskrivelse = this.getBeskrivelse();
            String rhsBeskrivelse;
            rhsBeskrivelse = that.getBeskrivelse();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "beskrivelse", lhsBeskrivelse), LocatorUtils.property(thatLocator, "beskrivelse", rhsBeskrivelse), lhsBeskrivelse, rhsBeskrivelse)) {
                return false;
            }
        }
        {
            List<Legemiddelforslag> lhsLegemiddelforslag;
            lhsLegemiddelforslag = (((this.legemiddelforslag!= null)&&(!this.legemiddelforslag.isEmpty()))?this.getLegemiddelforslag():null);
            List<Legemiddelforslag> rhsLegemiddelforslag;
            rhsLegemiddelforslag = (((that.legemiddelforslag!= null)&&(!that.legemiddelforslag.isEmpty()))?that.getLegemiddelforslag():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "legemiddelforslag", lhsLegemiddelforslag), LocatorUtils.property(thatLocator, "legemiddelforslag", rhsLegemiddelforslag), lhsLegemiddelforslag, rhsLegemiddelforslag)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theBeskrivelse;
            theBeskrivelse = this.getBeskrivelse();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "beskrivelse", theBeskrivelse), currentHashCode, theBeskrivelse);
        }
        {
            List<Legemiddelforslag> theLegemiddelforslag;
            theLegemiddelforslag = (((this.legemiddelforslag!= null)&&(!this.legemiddelforslag.isEmpty()))?this.getLegemiddelforslag():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "legemiddelforslag", theLegemiddelforslag), currentHashCode, theLegemiddelforslag);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
